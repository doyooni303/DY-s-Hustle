{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"[NLP Study] MultiLayer Perceptron","provenance":[],"collapsed_sections":["ZUBuuDU80fJL"],"authorship_tag":"ABX9TyOeoHxGQ2i3vPpetKwO57Dk"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"u8epi0mEs2FP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":794},"executionInfo":{"status":"ok","timestamp":1598679181047,"user_tz":-540,"elapsed":13082,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"ef6cd8cd-9aee-47ce-f6d7-67b7fc5cf122"},"source":["from IPython.display import display\n","import IPython\n","import numpy as np\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import scipy as sp\n","import sklearn as skl\n","%matplotlib notebook\n","%matplotlib inline\n","import tensorflow as tf\n","!pip install mglearn\n","!pip install gensim\n","!pip install nltk\n","import nltk\n","import mglearn as mglearn\n","from tensorflow import keras\n","from tensorflow.keras import datasets, layers, models"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting mglearn\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/65/38/8aced26fce0b2ae82c3c87cd3b6105f38ca6d9d51704ecc44aa54473e6b9/mglearn-0.1.9.tar.gz (540kB)\n","\r\u001b[K     |▋                               | 10kB 18.2MB/s eta 0:00:01\r\u001b[K     |█▏                              | 20kB 1.6MB/s eta 0:00:01\r\u001b[K     |█▉                              | 30kB 2.1MB/s eta 0:00:01\r\u001b[K     |██▍                             | 40kB 2.4MB/s eta 0:00:01\r\u001b[K     |███                             | 51kB 1.9MB/s eta 0:00:01\r\u001b[K     |███▋                            | 61kB 2.1MB/s eta 0:00:01\r\u001b[K     |████▎                           | 71kB 2.3MB/s eta 0:00:01\r\u001b[K     |████▉                           | 81kB 2.6MB/s eta 0:00:01\r\u001b[K     |█████▌                          | 92kB 2.7MB/s eta 0:00:01\r\u001b[K     |██████                          | 102kB 2.6MB/s eta 0:00:01\r\u001b[K     |██████▊                         | 112kB 2.6MB/s eta 0:00:01\r\u001b[K     |███████▎                        | 122kB 2.6MB/s eta 0:00:01\r\u001b[K     |███████▉                        | 133kB 2.6MB/s eta 0:00:01\r\u001b[K     |████████▌                       | 143kB 2.6MB/s eta 0:00:01\r\u001b[K     |█████████                       | 153kB 2.6MB/s eta 0:00:01\r\u001b[K     |█████████▊                      | 163kB 2.6MB/s eta 0:00:01\r\u001b[K     |██████████▎                     | 174kB 2.6MB/s eta 0:00:01\r\u001b[K     |███████████                     | 184kB 2.6MB/s eta 0:00:01\r\u001b[K     |███████████▌                    | 194kB 2.6MB/s eta 0:00:01\r\u001b[K     |████████████▏                   | 204kB 2.6MB/s eta 0:00:01\r\u001b[K     |████████████▊                   | 215kB 2.6MB/s eta 0:00:01\r\u001b[K     |█████████████▍                  | 225kB 2.6MB/s eta 0:00:01\r\u001b[K     |██████████████                  | 235kB 2.6MB/s eta 0:00:01\r\u001b[K     |██████████████▋                 | 245kB 2.6MB/s eta 0:00:01\r\u001b[K     |███████████████▏                | 256kB 2.6MB/s eta 0:00:01\r\u001b[K     |███████████████▊                | 266kB 2.6MB/s eta 0:00:01\r\u001b[K     |████████████████▍               | 276kB 2.6MB/s eta 0:00:01\r\u001b[K     |█████████████████               | 286kB 2.6MB/s eta 0:00:01\r\u001b[K     |█████████████████▋              | 296kB 2.6MB/s eta 0:00:01\r\u001b[K     |██████████████████▏             | 307kB 2.6MB/s eta 0:00:01\r\u001b[K     |██████████████████▉             | 317kB 2.6MB/s eta 0:00:01\r\u001b[K     |███████████████████▍            | 327kB 2.6MB/s eta 0:00:01\r\u001b[K     |████████████████████            | 337kB 2.6MB/s eta 0:00:01\r\u001b[K     |████████████████████▋           | 348kB 2.6MB/s eta 0:00:01\r\u001b[K     |█████████████████████▎          | 358kB 2.6MB/s eta 0:00:01\r\u001b[K     |█████████████████████▉          | 368kB 2.6MB/s eta 0:00:01\r\u001b[K     |██████████████████████▌         | 378kB 2.6MB/s eta 0:00:01\r\u001b[K     |███████████████████████         | 389kB 2.6MB/s eta 0:00:01\r\u001b[K     |███████████████████████▋        | 399kB 2.6MB/s eta 0:00:01\r\u001b[K     |████████████████████████▎       | 409kB 2.6MB/s eta 0:00:01\r\u001b[K     |████████████████████████▉       | 419kB 2.6MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▌      | 430kB 2.6MB/s eta 0:00:01\r\u001b[K     |██████████████████████████      | 440kB 2.6MB/s eta 0:00:01\r\u001b[K     |██████████████████████████▊     | 450kB 2.6MB/s eta 0:00:01\r\u001b[K     |███████████████████████████▎    | 460kB 2.6MB/s eta 0:00:01\r\u001b[K     |████████████████████████████    | 471kB 2.6MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▌   | 481kB 2.6MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▏  | 491kB 2.6MB/s eta 0:00:01\r\u001b[K     |█████████████████████████████▊  | 501kB 2.6MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▍ | 512kB 2.6MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████ | 522kB 2.6MB/s eta 0:00:01\r\u001b[K     |███████████████████████████████▌| 532kB 2.6MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 542kB 2.6MB/s \n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from mglearn) (1.18.5)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.6/dist-packages (from mglearn) (3.2.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.6/dist-packages (from mglearn) (0.22.2.post1)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.6/dist-packages (from mglearn) (1.0.5)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.6/dist-packages (from mglearn) (7.0.0)\n","Requirement already satisfied: cycler in /usr/local/lib/python3.6/dist-packages (from mglearn) (0.10.0)\n","Requirement already satisfied: imageio in /usr/local/lib/python3.6/dist-packages (from mglearn) (2.4.1)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.6/dist-packages (from mglearn) (0.16.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->mglearn) (2.4.7)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->mglearn) (2.8.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->mglearn) (1.2.0)\n","Requirement already satisfied: scipy>=0.17.0 in /usr/local/lib/python3.6/dist-packages (from scikit-learn->mglearn) (1.4.1)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas->mglearn) (2018.9)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from cycler->mglearn) (1.15.0)\n","Building wheels for collected packages: mglearn\n","  Building wheel for mglearn (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for mglearn: filename=mglearn-0.1.9-py2.py3-none-any.whl size=582639 sha256=0f7f96d4431ce476a23e5acb4693e81de56895fe8191c703ef6bec6ea28c8ba4\n","  Stored in directory: /root/.cache/pip/wheels/eb/a6/ea/a6a3716233fa62fc561259b5cb1e28f79e9ff3592c0adac5f0\n","Successfully built mglearn\n","Installing collected packages: mglearn\n","Successfully installed mglearn-0.1.9\n","Requirement already satisfied: gensim in /usr/local/lib/python3.6/dist-packages (3.6.0)\n","Requirement already satisfied: six>=1.5.0 in /usr/local/lib/python3.6/dist-packages (from gensim) (1.15.0)\n","Requirement already satisfied: smart-open>=1.2.1 in /usr/local/lib/python3.6/dist-packages (from gensim) (2.1.0)\n","Requirement already satisfied: scipy>=0.18.1 in /usr/local/lib/python3.6/dist-packages (from gensim) (1.4.1)\n","Requirement already satisfied: numpy>=1.11.3 in /usr/local/lib/python3.6/dist-packages (from gensim) (1.18.5)\n","Requirement already satisfied: boto3 in /usr/local/lib/python3.6/dist-packages (from smart-open>=1.2.1->gensim) (1.14.48)\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from smart-open>=1.2.1->gensim) (2.23.0)\n","Requirement already satisfied: boto in /usr/local/lib/python3.6/dist-packages (from smart-open>=1.2.1->gensim) (2.49.0)\n","Requirement already satisfied: s3transfer<0.4.0,>=0.3.0 in /usr/local/lib/python3.6/dist-packages (from boto3->smart-open>=1.2.1->gensim) (0.3.3)\n","Requirement already satisfied: botocore<1.18.0,>=1.17.48 in /usr/local/lib/python3.6/dist-packages (from boto3->smart-open>=1.2.1->gensim) (1.17.48)\n","Requirement already satisfied: jmespath<1.0.0,>=0.7.1 in /usr/local/lib/python3.6/dist-packages (from boto3->smart-open>=1.2.1->gensim) (0.10.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim) (2020.6.20)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim) (1.24.3)\n","Requirement already satisfied: docutils<0.16,>=0.10 in /usr/local/lib/python3.6/dist-packages (from botocore<1.18.0,>=1.17.48->boto3->smart-open>=1.2.1->gensim) (0.15.2)\n","Requirement already satisfied: python-dateutil<3.0.0,>=2.1 in /usr/local/lib/python3.6/dist-packages (from botocore<1.18.0,>=1.17.48->boto3->smart-open>=1.2.1->gensim) (2.8.1)\n","Requirement already satisfied: nltk in /usr/local/lib/python3.6/dist-packages (3.2.5)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from nltk) (1.15.0)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RH_P86o2tAdH","colab_type":"code","colab":{}},"source":["from sklearn.datasets import fetch_20newsgroups\n","%matplotlib inline\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.utils import to_categorical"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WhWgzaNHtNjK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":125},"executionInfo":{"status":"ok","timestamp":1598679244206,"user_tz":-540,"elapsed":20834,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"da540084-7978-4299-86e0-53100c26e71f"},"source":["from google.colab import drive\n","drive.mount('/gdrive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at /gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VVwPtxOr1Vyc","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":105},"executionInfo":{"status":"ok","timestamp":1598681357108,"user_tz":-540,"elapsed":2959,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"62224fb1-d811-47d4-905e-ac0a8e370862"},"source":["from nltk.corpus import stopwords\n","nltk.download('punkt')\n","nltk.download('stopwords')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"markdown","metadata":{"id":"cj2CRkYrtap3","colab_type":"text"},"source":["# 데이터 불러오기, 살펴보기"]},{"cell_type":"code","metadata":{"id":"ALzwyRcTtQwS","colab_type":"code","colab":{}},"source":["train = fetch_20newsgroups(subset = 'train')\n","all = fetch_20newsgroups(subset = 'all')\n","test = fetch_20newsgroups(subset = 'test') \n","# 'train'을 기재하면 훈련 데이터만 리턴한다. all은 전부 , test는 테스트 데이터만"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lLDZBrT3txDf","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1598682871222,"user_tz":-540,"elapsed":1104,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"78c62606-28e7-4626-fa74-1cfc15ccda0a"},"source":["print(train.keys())\n","print(test.keys())\n","print(all.keys())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["dict_keys(['data', 'filenames', 'target_names', 'target', 'DESCR'])\n","dict_keys(['data', 'filenames', 'target_names', 'target', 'DESCR'])\n","dict_keys(['data', 'filenames', 'target_names', 'target', 'DESCR'])\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"GP4EndwE7OJH","colab_type":"text"},"source":[""]},{"cell_type":"code","metadata":{"id":"l3YSroNdt4GS","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1598682890208,"user_tz":-540,"elapsed":1065,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"6369a56f-9090-4e8f-cc86-d522ee2fda69"},"source":["print('훈련용 샘플의 개수 : {}'.format(len(train.data)))\n","print('테스트용 샘플의 개수 : {}'.format(len(test.data)))\n","print('모든 샘플의 개수 : {}'.format(len(all.data)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["훈련용 샘플의 개수 : 11314\n","테스트용 샘플의 개수 : 7532\n","모든 샘플의 개수 : 18846\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mLFxz4bnuusA","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":72},"executionInfo":{"status":"ok","timestamp":1598682900806,"user_tz":-540,"elapsed":1023,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"e15651b1-94c0-416a-8ab9-40386cf61aec"},"source":["print('총 주제의 개수 : {}'.format(len(train.target_names)))\n","print(train.target_names)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["총 주제의 개수 : 20\n","['alt.atheism', 'comp.graphics', 'comp.os.ms-windows.misc', 'comp.sys.ibm.pc.hardware', 'comp.sys.mac.hardware', 'comp.windows.x', 'misc.forsale', 'rec.autos', 'rec.motorcycles', 'rec.sport.baseball', 'rec.sport.hockey', 'sci.crypt', 'sci.electronics', 'sci.med', 'sci.space', 'soc.religion.christian', 'talk.politics.guns', 'talk.politics.mideast', 'talk.politics.misc', 'talk.religion.misc']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"HldhKZjQu90C","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1598682915714,"user_tz":-540,"elapsed":975,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"43c9135e-32bd-4359-f28d-ed46973fd9dc"},"source":["print('첫번째 샘플의 레이블 : {}'.format(train.target[0]))\n","print('{0}번 레이블이 의미하는 주제 : {1}'.format(train.target[0],train.target_names[train.target[0]]))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["첫번째 샘플의 레이블 : 7\n","7번 레이블이 의미하는 주제 : rec.autos\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"4uaK9rEiyg_V","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":175},"executionInfo":{"status":"ok","timestamp":1598682927553,"user_tz":-540,"elapsed":1258,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"a38ac54d-dc5e-49a4-9484-3ae11e37e72c"},"source":["data = pd.DataFrame(train.data, columns = ['email']) # data로부터 데이터프레임 생성\n","data['target'] = pd.Series(train.target) # target 열 추가\n","data.info() #instance=11314개, email은 문자열, target은 정수형"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 11314 entries, 0 to 11313\n","Data columns (total 2 columns):\n"," #   Column  Non-Null Count  Dtype \n","---  ------  --------------  ----- \n"," 0   email   11314 non-null  object\n"," 1   target  11314 non-null  int64 \n","dtypes: int64(1), object(1)\n","memory usage: 176.9+ KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lN11mCPXyuvI","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1598680747340,"user_tz":-540,"elapsed":1109,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"fb94e8fd-ac9f-4194-f106-e25b46502680"},"source":["print(data.isnull().values.any()) #공백이 있나\n","print('중복을 제외한 샘플의 수 : {}'.format(data['email'].nunique()))\n","print('중복을 제외한 주제의 수 : {}'.format(data['target'].nunique()))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["False\n","중복을 제외한 샘플의 수 : 11314\n","중복을 제외한 주제의 수 : 20\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2r5zc6mxzLIf","colab_type":"text"},"source":["중복이 없는걸 확인했음"]},{"cell_type":"code","metadata":{"id":"V5XWIPZhzr__","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":774},"executionInfo":{"status":"ok","timestamp":1598680994045,"user_tz":-540,"elapsed":1014,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"b773da60-45a6-4039-9d96-38c406238070"},"source":["print(data.groupby('target').size())\n","print(data.groupby('target').size().reset_index(name='count')) #.reset_index(name='count')은 새 열을 만들어줌\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["target\n","0     480\n","1     584\n","2     591\n","3     590\n","4     578\n","5     593\n","6     585\n","7     594\n","8     598\n","9     597\n","10    600\n","11    595\n","12    591\n","13    594\n","14    593\n","15    599\n","16    546\n","17    564\n","18    465\n","19    377\n","dtype: int64\n","    target  count\n","0        0    480\n","1        1    584\n","2        2    591\n","3        3    590\n","4        4    578\n","5        5    593\n","6        6    585\n","7        7    594\n","8        8    598\n","9        9    597\n","10      10    600\n","11      11    595\n","12      12    591\n","13      13    594\n","14      14    593\n","15      15    599\n","16      16    546\n","17      17    564\n","18      18    465\n","19      19    377\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KlTSTZ2CzEjP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":303},"executionInfo":{"status":"ok","timestamp":1598680892994,"user_tz":-540,"elapsed":1058,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"eba4e4d6-5207-4678-ae6b-8062c5de7dc8"},"source":["data['target'].value_counts().plot(kind='bar');\n","plt.xticks(color='white')\n","plt.yticks(color='white')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([  0., 100., 200., 300., 400., 500., 600., 700.]),\n"," <a list of 8 Text major ticklabel objects>)"]},"metadata":{"tags":[]},"execution_count":28},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"dark"}}]},{"cell_type":"code","metadata":{"id":"7ySRqj6d0VfS","colab_type":"code","colab":{}},"source":["max_words = 10000 # 실습에 사용할 단어의 최대 개수\n","num_classes = 20 # 레이블의 수"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZUBuuDU80fJL","colab_type":"text"},"source":["# 위키독스 전처리"]},{"cell_type":"code","metadata":{"id":"-u0oGNdCEEN9","colab_type":"code","colab":{}},"source":["def prepare_data(train_data, test_data, mode): # 전처리 함수\n","    t = Tokenizer(num_words = max_words) # max_words 개수만큼의 단어만 사용한다.\n","    t.fit_on_texts(train_data) # fit_on_texts()안에 코퍼스를 입력으로 하면 빈도수를 기준으로 단어 집합을 생성한다.\n","    X_train = t.texts_to_matrix(train_data, mode=mode) # 샘플 수 × max_words 크기의 행렬 생성\n","    X_test = t.texts_to_matrix(test_data, mode=mode) # 샘플 수 × max_words 크기의 행렬 생성\n","    return X_train, X_test, t.index_word"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wrkQWFJTzP93","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":246},"executionInfo":{"status":"ok","timestamp":1598686154301,"user_tz":-540,"elapsed":1031,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"b650addf-8f5e-4eff-c1db-e8266a2fbeb5"},"source":["train_email = data['email'] # 훈련 데이터의 본문 저장\n","train_label = data['target'] # 훈련 데이터의 레이블 저장\n","test_email = test.data # 테스트 데이터의 본문 저장\n","test_label = test.target # 테스트 데이터의 레이블 저장\n","\n","print(train_email)\n","print(type(train_email))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0        From: lerxst@wam.umd.edu (where's my thing)\\nS...\n","1        From: guykuo@carson.u.washington.edu (Guy Kuo)...\n","2        From: twillis@ec.ecn.purdue.edu (Thomas E Will...\n","3        From: jgreen@amber (Joe Green)\\nSubject: Re: W...\n","4        From: jcm@head-cfa.harvard.edu (Jonathan McDow...\n","                               ...                        \n","11309    From: jim.zisfein@factory.com (Jim Zisfein) \\n...\n","11310    From: ebodin@pearl.tufts.edu\\nSubject: Screen ...\n","11311    From: westes@netcom.com (Will Estes)\\nSubject:...\n","11312    From: steve@hcrlgw (Steven Collins)\\nSubject: ...\n","11313    From: gunning@cco.caltech.edu (Kevin J. Gunnin...\n","Name: email, Length: 11314, dtype: object\n","<class 'pandas.core.series.Series'>\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8oQAmHky264P","colab_type":"code","colab":{}},"source":["X_train, X_test, index_to_word = prepare_data(train_email, test_email, 'binary') # binary 모드로 변환\n","y_train = to_categorical(train_label, num_classes) # 원-핫 인코딩\n","y_test = to_categorical(test_label, num_classes) # 원-핫 인코딩"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"E6zjbh0L29_n","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":122},"executionInfo":{"status":"ok","timestamp":1598685373902,"user_tz":-540,"elapsed":1696,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"44bccae2-0b67-476f-d647-4c199f284977"},"source":["print('훈련 샘플 본문의 크기 : {}'.format(X_train.shape))\n","print('훈련 샘플 레이블의 크기 : {}'.format(y_train.shape))\n","print('테스트 샘플 본문의 크기 : {}'.format(X_test.shape))\n","print('테스트 샘플 레이블의 크기 : {}'.format(y_test.shape))\n","print('빈도수 상위 1번 단어 : {}'.format(index_to_word[1]))\n","print('빈도수 상위 9999번 단어 : {}'.format(index_to_word[9999]))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["훈련 샘플 본문의 크기 : (11314, 10000)\n","훈련 샘플 레이블의 크기 : (11314, 20)\n","테스트 샘플 본문의 크기 : (7532, 10000)\n","테스트 샘플 레이블의 크기 : (7532, 20)\n","빈도수 상위 1번 단어 : the\n","빈도수 상위 9999번 단어 : mic\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"yWcTpdUpEPVr","colab_type":"text"},"source":["# DY 전처리 방법"]},{"cell_type":"markdown","metadata":{"id":"g5PP7MyBEwac","colab_type":"text"},"source":["불용어 제거, 특수문자 제거, 짧은 단어 제거 후 다시 역토큰화"]},{"cell_type":"code","metadata":{"id":"JyMbWYy86uts","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":402},"executionInfo":{"status":"ok","timestamp":1598687947387,"user_tz":-540,"elapsed":1169,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"891de503-557f-4535-ed0b-d6a78ee07661"},"source":["train_data = pd.DataFrame(train.data, columns = ['email']) # data로부터 데이터프레임 생성\n","train_data['target'] = pd.Series(train.target) # target 열 추가\n","test_data = pd.DataFrame(test.data, columns = ['email']) # data로부터 데이터프레임 생성\n","test_data['target'] = pd.Series(test.target) # target 열 추가\n","\n","train_data\n","test_data"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>email</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>From: v064mb9k@ubvmsd.cc.buffalo.edu (NEIL B. ...</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>From: Rick Miller &lt;rick@ee.uwm.edu&gt;\\nSubject: ...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>From: mathew &lt;mathew@mantis.co.uk&gt;\\nSubject: R...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>From: bakken@cs.arizona.edu (Dave Bakken)\\nSub...</td>\n","      <td>17</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>From: livesey@solntze.wpd.sgi.com (Jon Livesey...</td>\n","      <td>19</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>7527</th>\n","      <td>From: richmond@spiff.Princeton.EDU (Stupendous...</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>7528</th>\n","      <td>From: smytonj@murr11.alleg.edu (Jim Smyton)\\nS...</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>7529</th>\n","      <td>From: hhenderson@vax.clarku.edu\\nSubject: RE: ...</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>7530</th>\n","      <td>From: b859zam@utarlg.uta.edu \\nSubject: INTEL ...</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>7531</th>\n","      <td>From: adamsj@gtewd.mtv.gtegsc.com\\nSubject: Re...</td>\n","      <td>15</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>7532 rows × 2 columns</p>\n","</div>"],"text/plain":["                                                  email  target\n","0     From: v064mb9k@ubvmsd.cc.buffalo.edu (NEIL B. ...       7\n","1     From: Rick Miller <rick@ee.uwm.edu>\\nSubject: ...       5\n","2     From: mathew <mathew@mantis.co.uk>\\nSubject: R...       0\n","3     From: bakken@cs.arizona.edu (Dave Bakken)\\nSub...      17\n","4     From: livesey@solntze.wpd.sgi.com (Jon Livesey...      19\n","...                                                 ...     ...\n","7527  From: richmond@spiff.Princeton.EDU (Stupendous...      14\n","7528  From: smytonj@murr11.alleg.edu (Jim Smyton)\\nS...       4\n","7529  From: hhenderson@vax.clarku.edu\\nSubject: RE: ...       9\n","7530  From: b859zam@utarlg.uta.edu \\nSubject: INTEL ...       6\n","7531  From: adamsj@gtewd.mtv.gtegsc.com\\nSubject: Re...      15\n","\n","[7532 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":143}]},{"cell_type":"code","metadata":{"id":"BLDOMA6XNiNo","colab_type":"code","colab":{}},"source":["stop = stopwords.words('english')\n","stop.append('From')\n","stop.append('head')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8sGs3sbYPRK-","colab_type":"code","colab":{}},"source":["def dy_prepare(train,test):\n","  train['email']=train['email'].str.replace(\"[^a-zA-Z]\", \" \")\n","  train['email']= train.apply(lambda row: nltk.word_tokenize(row['email']), axis=1)\n","  train['email']=train['email'].apply(lambda x: [word for word in x if word not in (stop)])\n","  train['email']=train['email'].apply(lambda x: [word for word in x if len(word) > 3])\n","  train['email'] = train['email'].apply(lambda x: [WordNetLemmatizer().lemmatize(word, pos='v') for word in x])\n","  detokenized_doc = []\n","  for i in range(len(train)):\n","    t = ' '.join(train['email'][i])\n","    detokenized_doc.append(t)\n","  train['email'] = detokenized_doc\n","  \n","  test['email']=test['email'].str.replace(\"[^a-zA-Z]\", \" \")\n","  test['email']= test.apply(lambda row: nltk.word_tokenize(row['email']), axis=1)\n","  test['email']=test['email'].apply(lambda x: [word for word in x if word not in (stop)])\n","  test['email']=test['email'].apply(lambda x: [word for word in x if len(word) > 3])\n","  test['email'] = test['email'].apply(lambda x: [WordNetLemmatizer().lemmatize(word, pos='v') for word in x])\n","  detokenized_doc = []\n","  for i in range(len(test)):\n","    t = ' '.join(test['email'][i])\n","    detokenized_doc.append(t)\n","  test['email'] = detokenized_doc\n","\n","  return train['email'],test['email']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bMTTonOy_4K9","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":545},"executionInfo":{"status":"ok","timestamp":1598687980707,"user_tz":-540,"elapsed":29746,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"38825cb6-c7d7-478b-e2b3-727e41c415e7"},"source":["train_data['email'] = train_data['email'].str.replace(\"[^a-zA-Z]\", \" \")\n","print(train_data['email'][:5])\n","\n","train_data['email'] = train_data.apply(lambda row: nltk.word_tokenize(row['email']), axis=1)\n","print(train_data['email'][:5])\n","\n","train_data['email']=train_data['email'].apply(lambda x: [word for word in x if word not in (stop)])\n","print(train_data['email'][:5])\n","\n","train_data['email']=train_data['email'].apply(lambda x: [word for word in x if len(word) > 3])\n","print(train_data['email'][:5])\n","\n","train_data['email'] = train_data['email'].apply(lambda x: [WordNetLemmatizer().lemmatize(word, pos='v') for word in x])\n","print(train_data['email'][:5])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0    From  lerxst wam umd edu  where s my thing  Su...\n","1    From  guykuo carson u washington edu  Guy Kuo ...\n","2    From  twillis ec ecn purdue edu  Thomas E Will...\n","3    From  jgreen amber  Joe Green  Subject  Re  We...\n","4    From  jcm head cfa harvard edu  Jonathan McDow...\n","Name: email, dtype: object\n","0    [From, lerxst, wam, umd, edu, where, s, my, th...\n","1    [From, guykuo, carson, u, washington, edu, Guy...\n","2    [From, twillis, ec, ecn, purdue, edu, Thomas, ...\n","3    [From, jgreen, amber, Joe, Green, Subject, Re,...\n","4    [From, jcm, head, cfa, harvard, edu, Jonathan,...\n","Name: email, dtype: object\n","0    [lerxst, wam, umd, edu, thing, Subject, WHAT, ...\n","1    [guykuo, carson, u, washington, edu, Guy, Kuo,...\n","2    [twillis, ec, ecn, purdue, edu, Thomas, E, Wil...\n","3    [jgreen, amber, Joe, Green, Subject, Re, Weite...\n","4    [jcm, cfa, harvard, edu, Jonathan, McDowell, S...\n","Name: email, dtype: object\n","0    [lerxst, thing, Subject, WHAT, Nntp, Posting, ...\n","1    [guykuo, carson, washington, Subject, Clock, P...\n","2    [twillis, purdue, Thomas, Willis, Subject, que...\n","3    [jgreen, amber, Green, Subject, Weitek, Organi...\n","4    [harvard, Jonathan, McDowell, Subject, Shuttle...\n","Name: email, dtype: object\n","0    [lerxst, thing, Subject, WHAT, Nntp, Posting, ...\n","1    [guykuo, carson, washington, Subject, Clock, P...\n","2    [twillis, purdue, Thomas, Willis, Subject, que...\n","3    [jgreen, amber, Green, Subject, Weitek, Organi...\n","4    [harvard, Jonathan, McDowell, Subject, Shuttle...\n","Name: email, dtype: object\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rT1BjE5sNQwK","colab_type":"code","colab":{}},"source":["detokenized_doc = []\n","for i in range(len(train_data)):\n","    t = ' '.join(train_data['email'][i])\n","    detokenized_doc.append(t)\n","\n","train_data['email'] = detokenized_doc\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VZl-E1E-PDiA","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":402},"executionInfo":{"status":"ok","timestamp":1598688085939,"user_tz":-540,"elapsed":1045,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"00709ad9-ed34-4c67-c5a7-a90ec7cb41f5"},"source":["train_data"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>email</th>\n","      <th>target</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>lerxst thing Subject WHAT Nntp Posting Host Or...</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>guykuo carson washington Subject Clock Poll Fi...</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>twillis purdue Thomas Willis Subject question ...</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>jgreen amber Green Subject Weitek Organization...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>harvard Jonathan McDowell Subject Shuttle Laun...</td>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>11309</th>\n","      <td>zisfein factory Zisfein Subject Migraines scan...</td>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>11310</th>\n","      <td>ebodin pearl tufts Subject Screen Death Plus L...</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>11311</th>\n","      <td>westes netcom Will Estes Subject Mounting Cool...</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>11312</th>\n","      <td>steve hcrlgw Steven Collins Subject Sphere poi...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>11313</th>\n","      <td>gun caltech Kevin Gunning Subject steal Organi...</td>\n","      <td>8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>11314 rows × 2 columns</p>\n","</div>"],"text/plain":["                                                   email  target\n","0      lerxst thing Subject WHAT Nntp Posting Host Or...       7\n","1      guykuo carson washington Subject Clock Poll Fi...       4\n","2      twillis purdue Thomas Willis Subject question ...       4\n","3      jgreen amber Green Subject Weitek Organization...       1\n","4      harvard Jonathan McDowell Subject Shuttle Laun...      14\n","...                                                  ...     ...\n","11309  zisfein factory Zisfein Subject Migraines scan...      13\n","11310  ebodin pearl tufts Subject Screen Death Plus L...       4\n","11311  westes netcom Will Estes Subject Mounting Cool...       3\n","11312  steve hcrlgw Steven Collins Subject Sphere poi...       1\n","11313  gun caltech Kevin Gunning Subject steal Organi...       8\n","\n","[11314 rows x 2 columns]"]},"metadata":{"tags":[]},"execution_count":146}]},{"cell_type":"markdown","metadata":{"id":"Zlz66l9pRcFg","colab_type":"text"},"source":["# DY 전처리 + 위키독스 전처리"]},{"cell_type":"code","metadata":{"id":"3CaKeOsUTsbv","colab_type":"code","colab":{}},"source":["dy_prepare(train_data,test_data)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ynKGitTwRaZ2","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":228},"executionInfo":{"status":"ok","timestamp":1598688811334,"user_tz":-540,"elapsed":2133,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"7cce80b9-0963-48c9-813f-97c48a36d58f"},"source":["train_data = pd.DataFrame(train.data, columns = ['email']) # data로부터 데이터프레임 생성\n","train_data['target'] = pd.Series(train.target) # target 열 추가\n","test_data = pd.DataFrame(test.data, columns = ['email']) # data로부터 데이터프레임 생성\n","test_data['target'] = pd.Series(test.target) # target 열 추가\n","\n","print(train_data[:5])\n","print(test_data[:5])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["                                               email  target\n","0  From: lerxst@wam.umd.edu (where's my thing)\\nS...       7\n","1  From: guykuo@carson.u.washington.edu (Guy Kuo)...       4\n","2  From: twillis@ec.ecn.purdue.edu (Thomas E Will...       4\n","3  From: jgreen@amber (Joe Green)\\nSubject: Re: W...       1\n","4  From: jcm@head-cfa.harvard.edu (Jonathan McDow...      14\n","                                               email  target\n","0  From: v064mb9k@ubvmsd.cc.buffalo.edu (NEIL B. ...       7\n","1  From: Rick Miller <rick@ee.uwm.edu>\\nSubject: ...       5\n","2  From: mathew <mathew@mantis.co.uk>\\nSubject: R...       0\n","3  From: bakken@cs.arizona.edu (Dave Bakken)\\nSub...      17\n","4  From: livesey@solntze.wpd.sgi.com (Jon Livesey...      19\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"aIJtDvFARx6z","colab_type":"code","colab":{}},"source":["def dy_prepare(train,test):\n","  train['email']=train['email'].str.replace(\"[^a-zA-Z]\", \" \")\n","  train['email']= train.apply(lambda row: nltk.word_tokenize(row['email']), axis=1)\n","  train['email']=train['email'].apply(lambda x: [word for word in x if word not in (stop)])\n","  train['email']=train['email'].apply(lambda x: [word for word in x if len(word) > 3])\n","  train['email'] = train['email'].apply(lambda x: [WordNetLemmatizer().lemmatize(word, pos='v') for word in x])\n","  detokenized_doc = []\n","  for i in range(len(train)):\n","    t = ' '.join(train['email'][i])\n","    detokenized_doc.append(t)\n","  train['email'] = detokenized_doc\n","  \n","  test['email']=test['email'].str.replace(\"[^a-zA-Z]\", \" \")\n","  test['email']= test.apply(lambda row: nltk.word_tokenize(row['email']), axis=1)\n","  test['email']=test['email'].apply(lambda x: [word for word in x if word not in (stop)])\n","  test['email']=test['email'].apply(lambda x: [word for word in x if len(word) > 3])\n","  test['email'] = test['email'].apply(lambda x: [WordNetLemmatizer().lemmatize(word, pos='v') for word in x])\n","  detokenized_doc = []\n","  for i in range(len(test)):\n","    t = ' '.join(test['email'][i])\n","    detokenized_doc.append(t)\n","  test['email'] = detokenized_doc\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Yp1kneVJR57N","colab_type":"code","colab":{}},"source":["dy_prepare(train_data,test_data)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"X__osE6uSJU-","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":228},"executionInfo":{"status":"ok","timestamp":1598688998934,"user_tz":-540,"elapsed":1021,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"27a38349-b07b-4123-cd81-bbe2e1ff3dc0"},"source":["print(train_data[:5])\n","print(test_data[:5])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["                                               email  target\n","0  lerxst thing Subject WHAT Nntp Posting Host Or...       7\n","1  guykuo carson washington Subject Clock Poll Fi...       4\n","2  twillis purdue Thomas Willis Subject question ...       4\n","3  jgreen amber Green Subject Weitek Organization...       1\n","4  harvard Jonathan McDowell Subject Shuttle Laun...      14\n","                                               email  target\n","0  ubvmsd buffalo NEIL GANDLER Subject Need info ...       7\n","1  Rick Miller rick Subject Face Organization Jus...       5\n","2  mathew mathew mantis Subject STRONG weak Athei...       0\n","3  bakken arizona Dave Bakken Subject Saudi clerg...      17\n","4  livesey solntze Livesey Subject After years Ch...      19\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_P3i3BjhSd6N","colab_type":"code","colab":{}},"source":["def prepare_data(train_data, test_data, mode): # 전처리 함수\n","    t = Tokenizer(num_words = max_words) # max_words 개수만큼의 단어만 사용한다.\n","    t.fit_on_texts(train_data) # fit_on_texts()안에 코퍼스를 입력으로 하면 빈도수를 기준으로 단어 집합을 생성한다.\n","    X_train = t.texts_to_matrix(train_data, mode=mode) # 샘플 수 × max_words 크기의 행렬 생성\n","    X_test = t.texts_to_matrix(test_data, mode=mode) # 샘플 수 × max_words 크기의 행렬 생성\n","    return X_train, X_test, t.index_word"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-tfaK999SqFG","colab_type":"code","colab":{}},"source":["train_email = train_data['email'] # 훈련 데이터의 본문 저장\n","train_label = train_data['target'] # 훈련 데이터의 레이블 저장\n","test_email = test_data['email'] # 테스트 데이터의 본문 저장\n","test_label = test_data['target'] # 테스트 데이터의 레이블 저장"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_jR6aJfBSu4O","colab_type":"code","colab":{}},"source":["X_train, X_test, index_to_word = prepare_data(train_email, test_email, 'binary') # binary 모드로 변환 : 해당 코퍼스에 단어가 있냐 없냐만 보여주는 벡터\n","y_train = to_categorical(train_label, num_classes) # 원-핫 인코딩\n","y_test = to_categorical(test_label, num_classes) # 원-핫 인코딩"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0uJ-PSuOILlH","colab_type":"text"},"source":["# MLP 설계"]},{"cell_type":"code","metadata":{"id":"uDF6RK0rIPoZ","colab_type":"code","colab":{}},"source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense, Dropout"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"id7F0se-ITJ_","colab_type":"code","colab":{}},"source":["def fit_and_evaluate(X_train, y_train, X_test, y_test):\n","    model = Sequential()\n","    model.add(Dense(256, input_shape=(max_words,), activation='relu'))\n","    model.add(Dropout(0.5))\n","    model.add(Dense(128, activation='relu'))\n","    model.add(Dropout(0.5))\n","    model.add(Dense(num_classes, activation='softmax'))\n","\n","    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","    model.fit(X_train, y_train, batch_size=128, epochs=5, verbose=1, validation_split=0.1)\n","    score = model.evaluate(X_test, y_test, batch_size=128, verbose=0)\n","    return score[1]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zXI9roT5IXyw","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":791},"executionInfo":{"status":"ok","timestamp":1598689588211,"user_tz":-540,"elapsed":90784,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"41b7bcb0-9ad1-4029-ea38-4346f8ef1f5d"},"source":["modes = ['binary', 'count', 'tfidf', 'freq'] # 4개의 모드를 리스트에 저장.\n","\n","for mode in modes: # 4개의 모드에 대해서 각각 아래의 작업을 반복한다.\n","    X_train, X_test, _ = prepare_data(train_email, test_email, mode) # 모드에 따라서 데이터를 전처리\n","    score = fit_and_evaluate(X_train, y_train, X_test, y_test) # 모델을 훈련하고 평가.\n","    print(mode+' 모드의 테스트 정확도:', score)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch 1/5\n","80/80 [==============================] - 3s 39ms/step - loss: 2.3053 - accuracy: 0.3490 - val_loss: 0.9603 - val_accuracy: 0.8154\n","Epoch 2/5\n","80/80 [==============================] - 3s 37ms/step - loss: 0.8439 - accuracy: 0.7775 - val_loss: 0.4586 - val_accuracy: 0.8790\n","Epoch 3/5\n","80/80 [==============================] - 3s 43ms/step - loss: 0.4072 - accuracy: 0.8970 - val_loss: 0.3696 - val_accuracy: 0.8940\n","Epoch 4/5\n","80/80 [==============================] - 3s 39ms/step - loss: 0.2523 - accuracy: 0.9369 - val_loss: 0.3415 - val_accuracy: 0.8940\n","Epoch 5/5\n","80/80 [==============================] - 3s 37ms/step - loss: 0.1613 - accuracy: 0.9602 - val_loss: 0.3242 - val_accuracy: 0.9028\n","binary 모드의 테스트 정확도: 0.8260754346847534\n","Epoch 1/5\n","80/80 [==============================] - 3s 40ms/step - loss: 2.2889 - accuracy: 0.3626 - val_loss: 1.0127 - val_accuracy: 0.8110\n","Epoch 2/5\n","80/80 [==============================] - 3s 37ms/step - loss: 0.9038 - accuracy: 0.7684 - val_loss: 0.5187 - val_accuracy: 0.8807\n","Epoch 3/5\n","80/80 [==============================] - 3s 37ms/step - loss: 0.4857 - accuracy: 0.8782 - val_loss: 0.4155 - val_accuracy: 0.8887\n","Epoch 4/5\n","80/80 [==============================] - 3s 38ms/step - loss: 0.3070 - accuracy: 0.9274 - val_loss: 0.3788 - val_accuracy: 0.8949\n","Epoch 5/5\n","80/80 [==============================] - 3s 37ms/step - loss: 0.2013 - accuracy: 0.9521 - val_loss: 0.3692 - val_accuracy: 0.8958\n","count 모드의 테스트 정확도: 0.8130642771720886\n","Epoch 1/5\n","80/80 [==============================] - 3s 39ms/step - loss: 2.1782 - accuracy: 0.3800 - val_loss: 0.7583 - val_accuracy: 0.8578\n","Epoch 2/5\n","80/80 [==============================] - 3s 37ms/step - loss: 0.7892 - accuracy: 0.7848 - val_loss: 0.4356 - val_accuracy: 0.8852\n","Epoch 3/5\n","80/80 [==============================] - 3s 37ms/step - loss: 0.4164 - accuracy: 0.8846 - val_loss: 0.3630 - val_accuracy: 0.8958\n","Epoch 4/5\n","80/80 [==============================] - 3s 37ms/step - loss: 0.2528 - accuracy: 0.9324 - val_loss: 0.3452 - val_accuracy: 0.8975\n","Epoch 5/5\n","80/80 [==============================] - 3s 37ms/step - loss: 0.1794 - accuracy: 0.9540 - val_loss: 0.3372 - val_accuracy: 0.8966\n","tfidf 모드의 테스트 정확도: 0.8230217695236206\n","Epoch 1/5\n","80/80 [==============================] - 3s 38ms/step - loss: 2.9637 - accuracy: 0.1138 - val_loss: 2.8718 - val_accuracy: 0.3330\n","Epoch 2/5\n","80/80 [==============================] - 3s 37ms/step - loss: 2.5396 - accuracy: 0.3253 - val_loss: 2.0646 - val_accuracy: 0.6113\n","Epoch 3/5\n","80/80 [==============================] - 3s 37ms/step - loss: 1.7672 - accuracy: 0.5094 - val_loss: 1.3624 - val_accuracy: 0.7500\n","Epoch 4/5\n","80/80 [==============================] - 3s 37ms/step - loss: 1.2147 - accuracy: 0.6635 - val_loss: 0.9451 - val_accuracy: 0.7959\n","Epoch 5/5\n","80/80 [==============================] - 3s 38ms/step - loss: 0.8804 - accuracy: 0.7562 - val_loss: 0.7135 - val_accuracy: 0.8401\n","freq 모드의 테스트 정확도: 0.7673924565315247\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"BOm7g_7WVLfL","colab_type":"text"},"source":["[DY 전처리 추가]\n","\n","\n","*   binary 모드의 테스트 정확도: 0.8260754346847534\n","*   count 모드의 테스트 정확도: 0.8130642771720886\n","*   tfidf 모드의 테스트 정확도: 0.8230217695236206\n","*   freq 모드의 테스트 정확도: 0.7673924565315247\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","[위키독스 전처리]\n","\n","*   binary 모드의 테스트 정확도: 0.8312533\n","*   count 모드의 테스트 정확도: 0.8239511\n","*   tfidf 모드의 테스트 정확도: 0.8381572\n","*   freq 모드의 테스트 정확도: 0.6902549\n","\n","\n","\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"NZ6vmqBHUdD-","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}