{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"[Bottom Deeplearning] Back propagation, Full NN with GD","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNYazbPnE+X9YhVxatIcMJy"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"BQls5IPdyy7E","colab_type":"text"},"source":["# Full NN with GD"]},{"cell_type":"code","metadata":{"id":"3NLGplf1H8b5","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":787},"executionInfo":{"status":"ok","timestamp":1598076762889,"user_tz":-540,"elapsed":21156,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"c7299f37-c553-4764-8573-1ce294f250e5"},"source":["from IPython.display import display\n","import IPython\n","import numpy as np\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import scipy as sp\n","import sklearn as skl\n","%matplotlib notebook\n","%matplotlib inline\n","import tensorflow as tf\n","!pip install mglearn\n","!pip install gensim\n","!pip install nltk\n","import nltk\n","import mglearn as mglearn\n","from tensorflow import keras\n","from tensorflow.keras import datasets, layers, models"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Collecting mglearn\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/65/38/8aced26fce0b2ae82c3c87cd3b6105f38ca6d9d51704ecc44aa54473e6b9/mglearn-0.1.9.tar.gz (540kB)\n","\u001b[K     |████████████████████████████████| 542kB 2.7MB/s \n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from mglearn) (1.18.5)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.6/dist-packages (from mglearn) (3.2.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.6/dist-packages (from mglearn) (0.22.2.post1)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.6/dist-packages (from mglearn) (1.0.5)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.6/dist-packages (from mglearn) (7.0.0)\n","Requirement already satisfied: cycler in /usr/local/lib/python3.6/dist-packages (from mglearn) (0.10.0)\n","Requirement already satisfied: imageio in /usr/local/lib/python3.6/dist-packages (from mglearn) (2.4.1)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.6/dist-packages (from mglearn) (0.16.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->mglearn) (1.2.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->mglearn) (2.4.7)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->mglearn) (2.8.1)\n","Requirement already satisfied: scipy>=0.17.0 in /usr/local/lib/python3.6/dist-packages (from scikit-learn->mglearn) (1.4.1)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas->mglearn) (2018.9)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from cycler->mglearn) (1.15.0)\n","Building wheels for collected packages: mglearn\n","  Building wheel for mglearn (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for mglearn: filename=mglearn-0.1.9-py2.py3-none-any.whl size=582638 sha256=eb57c4ac54f12b689152632af27a8a167b5c1fadcd3d2882695f3a5bccd99c91\n","  Stored in directory: /root/.cache/pip/wheels/eb/a6/ea/a6a3716233fa62fc561259b5cb1e28f79e9ff3592c0adac5f0\n","Successfully built mglearn\n","Installing collected packages: mglearn\n","Successfully installed mglearn-0.1.9\n","Requirement already satisfied: gensim in /usr/local/lib/python3.6/dist-packages (3.6.0)\n","Requirement already satisfied: scipy>=0.18.1 in /usr/local/lib/python3.6/dist-packages (from gensim) (1.4.1)\n","Requirement already satisfied: six>=1.5.0 in /usr/local/lib/python3.6/dist-packages (from gensim) (1.15.0)\n","Requirement already satisfied: smart-open>=1.2.1 in /usr/local/lib/python3.6/dist-packages (from gensim) (2.1.0)\n","Requirement already satisfied: numpy>=1.11.3 in /usr/local/lib/python3.6/dist-packages (from gensim) (1.18.5)\n","Requirement already satisfied: boto3 in /usr/local/lib/python3.6/dist-packages (from smart-open>=1.2.1->gensim) (1.14.37)\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from smart-open>=1.2.1->gensim) (2.23.0)\n","Requirement already satisfied: boto in /usr/local/lib/python3.6/dist-packages (from smart-open>=1.2.1->gensim) (2.49.0)\n","Requirement already satisfied: botocore<1.18.0,>=1.17.37 in /usr/local/lib/python3.6/dist-packages (from boto3->smart-open>=1.2.1->gensim) (1.17.37)\n","Requirement already satisfied: s3transfer<0.4.0,>=0.3.0 in /usr/local/lib/python3.6/dist-packages (from boto3->smart-open>=1.2.1->gensim) (0.3.3)\n","Requirement already satisfied: jmespath<1.0.0,>=0.7.1 in /usr/local/lib/python3.6/dist-packages (from boto3->smart-open>=1.2.1->gensim) (0.10.0)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim) (2020.6.20)\n","Requirement already satisfied: docutils<0.16,>=0.10 in /usr/local/lib/python3.6/dist-packages (from botocore<1.18.0,>=1.17.37->boto3->smart-open>=1.2.1->gensim) (0.15.2)\n","Requirement already satisfied: python-dateutil<3.0.0,>=2.1 in /usr/local/lib/python3.6/dist-packages (from botocore<1.18.0,>=1.17.37->boto3->smart-open>=1.2.1->gensim) (2.8.1)\n","Requirement already satisfied: nltk in /usr/local/lib/python3.6/dist-packages (3.2.5)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from nltk) (1.15.0)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LcCih5kfIbT-","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1598076762890,"user_tz":-540,"elapsed":21153,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}}},"source":["# coding: utf-8\n","\n","\n","class MulLayer:\n","    def __init__(self):\n","        self.x = None\n","        self.y = None\n","\n","    def forward(self, x, y):\n","        self.x = x\n","        self.y = y                \n","        out = x * y\n","\n","        return out\n","\n","    def backward(self, dout):\n","        dx = dout * self.y  # x와 y를 바꾼다.\n","        dy = dout * self.x\n","\n","        return dx, dy\n","\n","\n","class AddLayer:\n","    def __init__(self):\n","        pass\n","\n","    def forward(self, x, y):\n","        out = x + y\n","\n","        return out\n","\n","    def backward(self, dout):\n","        dx = dout * 1\n","        dy = dout * 1\n","\n","        return dx, dy"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"-cb41n1-I0ss","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":86},"executionInfo":{"status":"ok","timestamp":1598076762891,"user_tz":-540,"elapsed":21149,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"1253f791-2feb-49cb-bf96-3dbd8e0d976e"},"source":["apple = 100\n","apple_num = 2\n","tax = 1.1\n","\n","mul_apple_layer = MulLayer()\n","mul_tax_layer = MulLayer()\n","\n","# forward\n","apple_price = mul_apple_layer.forward(apple, apple_num)\n","price = mul_tax_layer.forward(apple_price, tax)\n","\n","# backward\n","dprice = 1\n","dapple_price, dtax = mul_tax_layer.backward(dprice)\n","dapple, dapple_num = mul_apple_layer.backward(dapple_price)\n","\n","print(\"price:\", int(price))\n","print(\"dApple:\", dapple)\n","print(\"dApple_num:\", int(dapple_num))\n","print(\"dTax:\", dtax)"],"execution_count":3,"outputs":[{"output_type":"stream","text":["price: 220\n","dApple: 2.2\n","dApple_num: 110\n","dTax: 200\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lBy4An53JQaD","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":121},"executionInfo":{"status":"ok","timestamp":1598076762891,"user_tz":-540,"elapsed":21143,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"9e9ca552-4f26-4a16-fbae-6977977610ad"},"source":["apple = 1000\n","apple_num = 3\n","orange = 1500\n","orange_num =5\n","tax = 1.1\n","\n","# layer\n","mul_apple_layer = MulLayer()\n","mul_orange_layer = MulLayer()\n","add_apple_orange_layer = AddLayer()\n","mul_tax_layer = MulLayer()\n","\n","# forward\n","apple_price = mul_apple_layer.forward(apple, apple_num)  # (1)\n","orange_price = mul_orange_layer.forward(orange, orange_num)  # (2)\n","all_price = add_apple_orange_layer.forward(apple_price, orange_price)  # (3)\n","price = mul_tax_layer.forward(all_price, tax)  # (4)\n","\n","# backward\n","dprice = 1\n","dall_price, dtax = mul_tax_layer.backward(dprice)  # (4)\n","dapple_price, dorange_price = add_apple_orange_layer.backward(dall_price)  # (3)\n","dorange, dorange_num = mul_orange_layer.backward(dorange_price)  # (2)\n","dapple, dapple_num = mul_apple_layer.backward(dapple_price)  # (1)\n","\n","print(\"price:\", int(price))\n","print(\"dApple:\", dapple)\n","print(\"dApple_num:\", int(dapple_num))\n","print(\"dOrange:\", dorange)\n","print(\"dOrange_num:\", int(dorange_num))\n","print(\"dTax:\", dtax)"],"execution_count":4,"outputs":[{"output_type":"stream","text":["price: 11550\n","dApple: 3.3000000000000003\n","dApple_num: 1100\n","dOrange: 5.5\n","dOrange_num: 1650\n","dTax: 10500\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rmldEou2N_K7","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":541},"executionInfo":{"status":"error","timestamp":1598077412294,"user_tz":-540,"elapsed":670539,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"81c0b2c5-8f10-4ac4-e8e4-e5113591d58a"},"source":["from google.colab import drive\n","drive.mount('/gdrive')"],"execution_count":5,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    728\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 729\u001b[0;31m                 \u001b[0mident\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreply\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msession\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstdin_socket\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    730\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/jupyter_client/session.py\u001b[0m in \u001b[0;36mrecv\u001b[0;34m(self, socket, mode, content, copy)\u001b[0m\n\u001b[1;32m    802\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 803\u001b[0;31m             \u001b[0mmsg_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msocket\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv_multipart\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    804\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mzmq\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mZMQError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/zmq/sugar/socket.py\u001b[0m in \u001b[0;36mrecv_multipart\u001b[0;34m(self, flags, copy, track)\u001b[0m\n\u001b[1;32m    490\u001b[0m         \"\"\"\n\u001b[0;32m--> 491\u001b[0;31m         \u001b[0mparts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrecv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mflags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtrack\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    492\u001b[0m         \u001b[0;31m# have first part already, only loop while more to receive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket.Socket.recv\u001b[0;34m()\u001b[0m\n","\u001b[0;32mzmq/backend/cython/socket.pyx\u001b[0m in \u001b[0;36mzmq.backend.cython.socket._recv_copy\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/zmq/backend/cython/checkrc.pxd\u001b[0m in \u001b[0;36mzmq.backend.cython.checkrc._check_rc\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: ","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-5-e5b0420cd036>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdrive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/gdrive'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36mmount\u001b[0;34m(mountpoint, force_remount, timeout_ms, use_metadata_server)\u001b[0m\n\u001b[1;32m    240\u001b[0m       \u001b[0mauth_prompt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0md\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmatch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m'\\nEnter your authorization code:\\n'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    241\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfifo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'w'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfifo_file\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 242\u001b[0;31m         \u001b[0mfifo_file\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_getpass\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetpass\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mauth_prompt\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m'\\n'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    243\u001b[0m       \u001b[0mwrote_to_fifo\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    244\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mwrote_to_fifo\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36mgetpass\u001b[0;34m(self, prompt, stream)\u001b[0m\n\u001b[1;32m    685\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    686\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 687\u001b[0;31m             \u001b[0mpassword\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    688\u001b[0m         )\n\u001b[1;32m    689\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    732\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    733\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 734\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    735\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    736\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"R-XeNMq3OHww","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1598077412288,"user_tz":-540,"elapsed":670530,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}}},"source":["import os\n","os.chdir(\"/gdrive/My Drive/Colab Notebooks/Bottom Deeplearning/deep-learning-from-scratch-master/common\") #디렉토리 지정하기 거기서 파일 가져오는 거고\n","from functions import *\n","from util import im2col, col2im #원하는 파일 가져오기"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4cwa57XlMos4","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1598077412291,"user_tz":-540,"elapsed":670530,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}}},"source":["class Relu:\n","    def __init__(self):\n","        self.mask = None\n","\n","    def forward(self, x):\n","        self.mask = (x <= 0)\n","        out = x.copy()\n","        out[self.mask] = 0\n","\n","        return out\n","\n","    def backward(self, dout):\n","        dout[self.mask] = 0\n","        dx = dout*1\n","\n","        return dx\n","\n","\n","class Sigmoid:\n","    def __init__(self):\n","        self.out = None\n","\n","    def forward(self, x):\n","        out = sigmoid(x)\n","        self.out = out\n","        return out\n","\n","    def backward(self, dout):\n","        dx = dout * (1.0 - self.out) * self.out\n","\n","        return dx\n","\n","\n","class Affine:\n","    def __init__(self, W, b):\n","        self.W = W\n","        self.b = b\n","        \n","        self.x = None\n","        self.original_x_shape = None\n","        # 가중치와 편향 매개변수의 미분\n","        self.dW = None\n","        self.db = None\n","\n","    def forward(self, x):\n","        # 텐서 대응\n","        self.original_x_shape = x.shape\n","        x = x.reshape(x.shape[0], -1)\n","        self.x = x\n","\n","        out = np.dot(self.x, self.W) + self.b\n","\n","        return out\n","\n","    def backward(self, dout):\n","        dx = np.dot(dout, self.W.T) #순서 잘 봐야 함 여기는 위의 flow*wT 임\n","        self.dW = np.dot(self.x.T, dout) #여기는 xT*flow\n","        self.db = np.sum(dout, axis=0)\n","        \n","        dx = dx.reshape(*self.original_x_shape)  # 입력 데이터 모양 변경(텐서 대응)\n","        return dx\n","\n","\n","class SoftmaxWithLoss:\n","    def __init__(self):\n","        self.loss = None # 손실함수\n","        self.y = None    # softmax의 출력\n","        self.t = None    # 정답 레이블(원-핫 인코딩 형태)\n","        \n","    def forward(self, x, t):\n","        self.t = t\n","        self.y = softmax(x)\n","        self.loss = cross_entropy_error(self.y, self.t)\n","        \n","        return self.loss\n","\n","    def backward(self, dout=1):\n","        batch_size = self.t.shape[0]\n","        if self.t.size == self.y.size: # 정답 레이블이 원-핫 인코딩 형태일 때\n","            dx = (self.y - self.t) / batch_size\n","        else:\n","            dx = self.y.copy()\n","            dx[np.arange(batch_size), self.t] -= 1\n","            dx = dx / batch_size\n","        \n","        return dx\n","\n","\n","\n","    def __init__(self, pool_h, pool_w, stride=1, pad=0):\n","        self.pool_h = pool_h\n","        self.pool_w = pool_w\n","        self.stride = stride\n","        self.pad = pad\n","        \n","        self.x = None\n","        self.arg_max = None\n","\n","    def forward(self, x):\n","        N, C, H, W = x.shape\n","        out_h = int(1 + (H - self.pool_h) / self.stride)\n","        out_w = int(1 + (W - self.pool_w) / self.stride)\n","\n","        col = im2col(x, self.pool_h, self.pool_w, self.stride, self.pad)\n","        col = col.reshape(-1, self.pool_h*self.pool_w)\n","\n","        arg_max = np.argmax(col, axis=1)\n","        out = np.max(col, axis=1)\n","        out = out.reshape(N, out_h, out_w, C).transpose(0, 3, 1, 2)\n","\n","        self.x = x\n","        self.arg_max = arg_max\n","\n","        return out\n","\n","    def backward(self, dout):\n","        dout = dout.transpose(0, 2, 3, 1)\n","        \n","        pool_size = self.pool_h * self.pool_w\n","        dmax = np.zeros((dout.size, pool_size))\n","        dmax[np.arange(self.arg_max.size), self.arg_max.flatten()] = dout.flatten()\n","        dmax = dmax.reshape(dout.shape + (pool_size,)) \n","        \n","        dcol = dmax.reshape(dmax.shape[0] * dmax.shape[1] * dmax.shape[2], -1)\n","        dx = col2im(dcol, self.x.shape, self.pool_h, self.pool_w, self.stride, self.pad)\n","        \n","        return dx"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dTC3A00ZOtUk","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1598077412292,"user_tz":-540,"elapsed":670528,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}}},"source":["# coding: utf-8\n","import sys, os\n","sys.path.append(os.pardir)  # 부모 디렉터리의 파일을 가져올 수 있도록 설정\n","os.chdir(\"/gdrive/My Drive/Colab Notebooks/Bottom Deeplearning/deep-learning-from-scratch-master/common\")\n","\n","from collections import OrderedDict\n","from layers import *\n","from gradient import numerical_gradient\n","\n","\n","class MultiLayerNet:\n","    \"\"\"완전연결 다층 신경망\n","\n","    Parameters\n","    ----------\n","    input_size : 입력 크기（MNIST의 경우엔 784）\n","    hidden_size_list : 각 은닉층의 뉴런 수를 담은 리스트（e.g. [100, 100, 100]）그럼 은닉층이 3개가 되는거지\n","    output_size : 출력 크기（MNIST의 경우엔 10）\n","    activation : 활성화 함수 - 'relu' 혹은 'sigmoid'\n","    weight_init_std : 가중치의 표준편차 지정（e.g. 0.01）\n","        'relu'나 'he'로 지정하면 'He 초깃값'으로 설정\n","        'sigmoid'나 'xavier'로 지정하면 'Xavier 초깃값'으로 설정\n","    weight_decay_lambda : 가중치 감소(L2 법칙)의 세기\n","    \"\"\"\n","    def __init__(self, input_size, hidden_size_list, output_size,\n","                 activation='relu', weight_init_std='relu', weight_decay_lambda=0):\n","        self.input_size = input_size\n","        self.output_size = output_size\n","        self.hidden_size_list = hidden_size_list\n","        self.hidden_layer_num = len(hidden_size_list)\n","        self.weight_decay_lambda = weight_decay_lambda\n","        self.params = {}\n","\n","        # 가중치 초기화\n","        self.__init_weight(weight_init_std)\n","\n","        # 계층 생성\n","        activation_layer = {'sigmoid': Sigmoid, 'relu': Relu}\n","        self.layers = OrderedDict()\n","        for idx in range(1, self.hidden_layer_num+1):\n","            self.layers['Affine' + str(idx)] = Affine(self.params['W' + str(idx)],\n","                                                      self.params['b' + str(idx)])\n","            self.layers['Activation_function' + str(idx)] = activation_layer[activation]()\n","\n","        idx = self.hidden_layer_num + 1\n","        self.layers['Affine' + str(idx)] = Affine(self.params['W' + str(idx)],\n","            self.params['b' + str(idx)])\n","\n","        self.last_layer = SoftmaxWithLoss()\n","\n","    def __init_weight(self, weight_init_std):\n","        \"\"\"가중치 초기화\n","        \n","        Parameters\n","        ----------\n","        weight_init_std : 가중치의 표준편차 지정（e.g. 0.01）\n","            'relu'나 'he'로 지정하면 'He 초깃값'으로 설정\n","            'sigmoid'나 'xavier'로 지정하면 'Xavier 초깃값'으로 설정\n","        \"\"\"\n","        all_size_list = [self.input_size] + self.hidden_size_list + [self.output_size]\n","        for idx in range(1, len(all_size_list)):\n","            scale = weight_init_std\n","            if str(weight_init_std).lower() in ('relu', 'he'):\n","                scale = np.sqrt(2.0 / all_size_list[idx - 1])  # ReLU를 사용할 때의 권장 초깃값\n","            elif str(weight_init_std).lower() in ('sigmoid', 'xavier'):\n","                scale = np.sqrt(1.0 / all_size_list[idx - 1])  # sigmoid를 사용할 때의 권장 초깃값\n","            self.params['W' + str(idx)] = scale * np.random.randn(all_size_list[idx-1], all_size_list[idx])\n","            self.params['b' + str(idx)] = np.zeros(all_size_list[idx])\n","\n","    def predict(self, x):\n","        for layer in self.layers.values():\n","            x = layer.forward(x)\n","\n","        return x\n","\n","    def loss(self, x, t):\n","        \"\"\"손실 함수를 구한다.\n","        \n","        Parameters\n","        ----------\n","        x : 입력 데이터\n","        t : 정답 레이블 \n","        \n","        Returns\n","        -------\n","        손실 함수의 값\n","        \"\"\"\n","        y = self.predict(x)\n","\n","        weight_decay = 0\n","        for idx in range(1, self.hidden_layer_num + 2):\n","            W = self.params['W' + str(idx)]\n","            weight_decay += 0.5 * self.weight_decay_lambda * np.sum(W ** 2)\n","\n","        return self.last_layer.forward(y, t) + weight_decay\n","\n","    def accuracy(self, x, t):\n","        y = self.predict(x)\n","        y = np.argmax(y, axis=1)\n","        if t.ndim != 1 : t = np.argmax(t, axis=1)\n","\n","        accuracy = np.sum(y == t) / float(x.shape[0])\n","        return accuracy\n","\n","    def numerical_gradient(self, x, t):\n","        \"\"\"기울기를 구한다(수치 미분).\n","        \n","        Parameters\n","        ----------\n","        x : 입력 데이터\n","        t : 정답 레이블\n","        \n","        Returns\n","        -------\n","        각 층의 기울기를 담은 딕셔너리(dictionary) 변수\n","            grads['W1']、grads['W2']、... 각 층의 가중치\n","            grads['b1']、grads['b2']、... 각 층의 편향\n","        \"\"\"\n","        loss_W = lambda W: self.loss(x, t)\n","\n","        grads = {}\n","        for idx in range(1, self.hidden_layer_num+2):\n","            grads['W' + str(idx)] = numerical_gradient(loss_W, self.params['W' + str(idx)])\n","            grads['b' + str(idx)] = numerical_gradient(loss_W, self.params['b' + str(idx)])\n","\n","        return grads\n","\n","    def gradient(self, x, t):\n","        \"\"\"기울기를 구한다(오차역전파법).\n","\n","        Parameters\n","        ----------\n","        x : 입력 데이터\n","        t : 정답 레이블\n","        \n","        Returns\n","        -------\n","        각 층의 기울기를 담은 딕셔너리(dictionary) 변수\n","            grads['W1']、grads['W2']、... 각 층의 가중치\n","            grads['b1']、grads['b2']、... 각 층의 편향\n","        \"\"\"\n","        # forward\n","        self.loss(x, t)\n","\n","        # backward\n","        dout = 1\n","        dout = self.last_layer.backward(dout)\n","\n","        layers = list(self.layers.values())\n","        layers.reverse()\n","        for layer in layers:\n","            dout = layer.backward(dout)\n","\n","        # 결과 저장\n","        grads = {}\n","        for idx in range(1, self.hidden_layer_num+2):\n","            grads['W' + str(idx)] = self.layers['Affine' + str(idx)].dW + self.weight_decay_lambda * self.layers['Affine' + str(idx)].W\n","            grads['b' + str(idx)] = self.layers['Affine' + str(idx)].db\n","\n","        return grads"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BYvMrv86SgDo","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1598077412293,"user_tz":-540,"elapsed":670527,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}}},"source":["# coding: utf-8\n","import sys, os\n","sys.path.append(os.pardir)\n","os.chdir(\"/gdrive/My Drive/Colab Notebooks/Bottom Deeplearning/deep-learning-from-scratch-master/ch04\")\n","from dataset.mnist import load_mnist\n","from two_layer_net import TwoLayerNet\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RTJzg5YxVC_X","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1598077412293,"user_tz":-540,"elapsed":670525,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}}},"source":["# 데이터 읽기\n","(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True, one_hot_label=True)\n","\n","network = TwoLayerNet(input_size=784, hidden_size=50, output_size=10)\n","\n","iters_num = 6000\n","train_size = x_train.shape[0]\n","batch_size = 100\n","learning_rate = 0.05\n","\n","train_loss_list = []\n","train_acc_list = []\n","test_acc_list = []\n","\n","iter_per_epoch = max(train_size / batch_size, 1)\n","\n","for i in range(iters_num):\n","    batch_mask = np.random.choice(train_size, batch_size) #훈련 사이즈 중에서 배치사이즈만큼의 원소 리스트를 뽑겠다.\n","    x_batch = x_train[batch_mask]\n","    t_batch = t_train[batch_mask]\n","    \n","    # 기울기 계산\n","    #grad = network.numerical_gradient(x_batch, t_batch) # 수치 미분 방식\n","    grad = network.gradient(x_batch, t_batch) # 오차역전파법 방식(훨씬 빠르다)\n","    \n","    # 갱신\n","    for key in ('W1', 'b1', 'W2', 'b2'):\n","        network.params[key] -= learning_rate * grad[key]\n","    \n","    loss = network.loss(x_batch, t_batch)\n","    train_loss_list.append(loss)\n","    \n","    if (i>1) and (i+1 % iter_per_epoch) == 0:\n","        train_acc = network.accuracy(x_train, t_train)\n","        test_acc = network.accuracy(x_test, t_test)\n","        train_acc_list.append(train_acc)\n","        test_acc_list.append(test_acc)\n","        print(\"{0}th Iteration : Trn_acc ={1},Test_acc={2}\".format(i+1,train_acc, test_acc))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"u3Ww3BLxWXLX","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1598077412294,"user_tz":-540,"elapsed":670524,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}}},"source":[""],"execution_count":null,"outputs":[]}]}