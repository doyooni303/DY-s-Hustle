{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"[Bottom Deeplearning] Weight Initialization","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMdICxm+n0Q4RrXoe/0nG6L"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"2NWOAED-iUuu","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":767},"executionInfo":{"status":"ok","timestamp":1598105993373,"user_tz":-540,"elapsed":18684,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"ebaf7545-8534-430c-9fa0-326f4e049f43"},"source":["from IPython.display import display\n","import IPython\n","import numpy as np\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import scipy as sp\n","import sklearn as skl\n","%matplotlib notebook\n","%matplotlib inline\n","import tensorflow as tf\n","!pip install mglearn\n","!pip install gensim\n","!pip install nltk\n","import nltk\n","import mglearn as mglearn\n","from tensorflow import keras\n","from tensorflow.keras import datasets, layers, models"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Collecting mglearn\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/65/38/8aced26fce0b2ae82c3c87cd3b6105f38ca6d9d51704ecc44aa54473e6b9/mglearn-0.1.9.tar.gz (540kB)\n","\u001b[K     |████████████████████████████████| 542kB 2.8MB/s \n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from mglearn) (1.18.5)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.6/dist-packages (from mglearn) (3.2.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.6/dist-packages (from mglearn) (0.22.2.post1)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.6/dist-packages (from mglearn) (1.0.5)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.6/dist-packages (from mglearn) (7.0.0)\n","Requirement already satisfied: cycler in /usr/local/lib/python3.6/dist-packages (from mglearn) (0.10.0)\n","Requirement already satisfied: imageio in /usr/local/lib/python3.6/dist-packages (from mglearn) (2.4.1)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.6/dist-packages (from mglearn) (0.16.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->mglearn) (2.4.7)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->mglearn) (2.8.1)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->mglearn) (1.2.0)\n","Requirement already satisfied: scipy>=0.17.0 in /usr/local/lib/python3.6/dist-packages (from scikit-learn->mglearn) (1.4.1)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas->mglearn) (2018.9)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from cycler->mglearn) (1.15.0)\n","Building wheels for collected packages: mglearn\n","  Building wheel for mglearn (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for mglearn: filename=mglearn-0.1.9-py2.py3-none-any.whl size=582638 sha256=0f7bde21e480b0340d6327bbc0fd3a9f40c1324a683fcf8a10ccb894105cae29\n","  Stored in directory: /root/.cache/pip/wheels/eb/a6/ea/a6a3716233fa62fc561259b5cb1e28f79e9ff3592c0adac5f0\n","Successfully built mglearn\n","Installing collected packages: mglearn\n","Successfully installed mglearn-0.1.9\n","Requirement already satisfied: gensim in /usr/local/lib/python3.6/dist-packages (3.6.0)\n","Requirement already satisfied: scipy>=0.18.1 in /usr/local/lib/python3.6/dist-packages (from gensim) (1.4.1)\n","Requirement already satisfied: six>=1.5.0 in /usr/local/lib/python3.6/dist-packages (from gensim) (1.15.0)\n","Requirement already satisfied: smart-open>=1.2.1 in /usr/local/lib/python3.6/dist-packages (from gensim) (2.1.0)\n","Requirement already satisfied: numpy>=1.11.3 in /usr/local/lib/python3.6/dist-packages (from gensim) (1.18.5)\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from smart-open>=1.2.1->gensim) (2.23.0)\n","Requirement already satisfied: boto in /usr/local/lib/python3.6/dist-packages (from smart-open>=1.2.1->gensim) (2.49.0)\n","Requirement already satisfied: boto3 in /usr/local/lib/python3.6/dist-packages (from smart-open>=1.2.1->gensim) (1.14.37)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim) (2020.6.20)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->smart-open>=1.2.1->gensim) (3.0.4)\n","Requirement already satisfied: jmespath<1.0.0,>=0.7.1 in /usr/local/lib/python3.6/dist-packages (from boto3->smart-open>=1.2.1->gensim) (0.10.0)\n","Requirement already satisfied: botocore<1.18.0,>=1.17.37 in /usr/local/lib/python3.6/dist-packages (from boto3->smart-open>=1.2.1->gensim) (1.17.37)\n","Requirement already satisfied: s3transfer<0.4.0,>=0.3.0 in /usr/local/lib/python3.6/dist-packages (from boto3->smart-open>=1.2.1->gensim) (0.3.3)\n","Requirement already satisfied: docutils<0.16,>=0.10 in /usr/local/lib/python3.6/dist-packages (from botocore<1.18.0,>=1.17.37->boto3->smart-open>=1.2.1->gensim) (0.15.2)\n","Requirement already satisfied: python-dateutil<3.0.0,>=2.1 in /usr/local/lib/python3.6/dist-packages (from botocore<1.18.0,>=1.17.37->boto3->smart-open>=1.2.1->gensim) (2.8.1)\n","Requirement already satisfied: nltk in /usr/local/lib/python3.6/dist-packages (3.2.5)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from nltk) (1.15.0)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"smGFdE2QidtK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":124},"executionInfo":{"status":"ok","timestamp":1598106164054,"user_tz":-540,"elapsed":40248,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"008d13b4-00a1-49a4-f25a-eb0ac0ee440d"},"source":["from google.colab import drive\n","drive.mount('/gdrive')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at /gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"j_jxENF1jD3o","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":499},"executionInfo":{"status":"ok","timestamp":1598106322944,"user_tz":-540,"elapsed":2004,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"cab78818-bfea-40b7-da97-9d92c1f88c07"},"source":["def sigmoid(x):\n","    return 1 / (1 + np.exp(-x))\n","\n","\n","def ReLU(x):\n","    return np.maximum(0, x)\n","\n","\n","def tanh(x):\n","    return np.tanh(x)\n","    \n","input_data = np.random.randn(1000, 100)  # 1000개의 데이터\n","node_num = 100  # 각 은닉층의 노드(뉴런) 수\n","hidden_layer_size = 5  # 은닉층이 5개\n","activations = {}  # 이곳에 활성화 결과를 저장\n","\n","x = input_data\n","\n","for i in range(hidden_layer_size):\n","    if i != 0:\n","        x = activations[i-1]\n","\n","    # 초깃값을 다양하게 바꿔가며 실험해보자！\n","    w = np.random.randn(node_num, node_num) * 1\n","    # w = np.random.randn(node_num, node_num) * 0.01\n","    # w = np.random.randn(node_num, node_num) * np.sqrt(1.0 / node_num)\n","    # w = np.random.randn(node_num, node_num) * np.sqrt(2.0 / node_num)\n","\n","\n","    a = np.dot(x, w)\n","\n","\n","    # 활성화 함수도 바꿔가며 실험해보자！\n","    #z = sigmoid(a)\n","    z = ReLU(a)\n","    # z = tanh(a)\n","\n","    activations[i] = z\n","\n","# 히스토그램 그리기\n","plt.figure(figsize=(10,8))\n","for i, a in activations.items():\n","    plt.subplot(1, len(activations), i+1)\n","    plt.title(str(i+1) + \"-layer\",color='white')\n","    if i != 0: plt.yticks([], [])\n","    # plt.xlim(0.1, 1)\n","    # plt.ylim(0, 7000)\n","    plt.hist(a.flatten(), 30, range=(0,1))\n","plt.show()\n"],"execution_count":7,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x576 with 5 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"jfoH_IidjlMH","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1598106543667,"user_tz":-540,"elapsed":8305,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}}},"source":["import os\n","import sys\n","\n","sys.path.append(os.pardir)  # 부모 디렉터리의 파일을 가져올 수 있도록 설정\n","os.chdir(\"/gdrive/My Drive/Colab Notebooks/Bottom Deeplearning/deep-learning-from-scratch-master/common\")\n","from util import smooth_curve\n","from multi_layer_net import MultiLayerNet  \n","from optimizer import SGD\n","os.chdir(\"/gdrive/My Drive/Colab Notebooks/Bottom Deeplearning/deep-learning-from-scratch-master/dataset\")\n","from mnist import load_mnist\n","\n"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"7SydpLqlkoVx","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1598106684120,"user_tz":-540,"elapsed":2296,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}}},"source":["\n","# 0. MNIST 데이터 읽기==========\n","(x_train, t_train), (x_test, t_test) = load_mnist(normalize=True)\n","\n","train_size = x_train.shape[0]\n","batch_size = 128\n","max_iterations = 5000\n"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"h8xrLeO5lMGv","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1598106766891,"user_tz":-540,"elapsed":1094,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}}},"source":["# 1. 실험용 설정==========\n","weight_init_types = {'std=0.01': 0.01, 'Xavier': 'sigmoid', 'He': 'relu'}\n","optimizer = SGD(lr=0.01)\n","\n","networks = {}\n","train_loss = {}\n","\n","np.random.seed(0)\n","\n","for key, weight_type in weight_init_types.items():\n","    networks[key] = MultiLayerNet(input_size=784, hidden_size_list=[100, 100, 100, 100],\n","                                  output_size=10, weight_init_std=weight_type)\n","    train_loss[key] = []\n","\n"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"Uwu5S2yflgmM","colab_type":"code","colab":{}},"source":["\n","# 2. 훈련 시작==========\n","for i in range(max_iterations):\n","    batch_mask = np.random.choice(train_size, batch_size)\n","    x_batch = x_train[batch_mask]\n","    t_batch = t_train[batch_mask]\n","    \n","    for key in weight_init_types.keys():\n","        grads = networks[key].gradient(x_batch, t_batch)\n","        optimizer.update(networks[key].params, grads)\n","    \n","        loss = networks[key].loss(x_batch, t_batch)\n","        train_loss[key].append(loss)\n","    \n","    if ((i+1) % 100) == 0:\n","        print(\"===========\" + \"iteration:\" + str(i+1) + \"===========\")\n","        for key in weight_init_types.keys():\n","            loss = networks[key].loss(x_batch, t_batch)\n","            print(key + \":\" + str(loss))\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"c2QuOydRlsS_","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":283},"executionInfo":{"status":"ok","timestamp":1598107146693,"user_tz":-540,"elapsed":1150,"user":{"displayName":"‍김도윤[ 학부재학 / 산업경영공학부 ]","photoUrl":"","userId":"10791284398836833218"}},"outputId":"9cc62dfb-6b56-4f69-c88b-b018c0dccb1e"},"source":["# 3. 그래프 그리기==========\n","markers = {'std=0.01': 'o', 'Xavier': 's', 'He': 'D'}\n","x = np.arange(max_iterations)\n","for key in weight_init_types.keys():\n","    plt.plot(x, smooth_curve(train_loss[key]), marker=markers[key], markevery=100, label=key)\n","plt.xlabel(\"iterations\",color='white')\n","plt.ylabel(\"loss\",color='white')\n","plt.ylim(0, 2.5)\n","plt.legend()\n","plt.show()"],"execution_count":12,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"5yGd9FEmm9Ud","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}